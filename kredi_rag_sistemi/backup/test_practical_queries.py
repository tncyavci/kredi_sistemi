#!/usr/bin/env python3
"""
Test practical financial queries
"""

from app.core.rag import KrediRAG
import os

def test_practical_queries():
    print("üöÄ Pratik finansal sorgu testi ba≈ülƒ±yor...")
    
    model_path = "./models/mistral-7b-instruct-v0.2.Q4_K_M.gguf"
    
    if not os.path.exists(model_path):
        print(f"‚ùå Model bulunamadƒ±: {model_path}")
        return
    
    # RAG sistemini ba≈ülat
    print("üîß RAG sistemi ba≈ülatƒ±lƒ±yor...")
    rag = KrediRAG(
        model_path=model_path,
        vector_db_path="./data/vector_db",
        force_recreate_db=False
    )
    
    print(f"üìä Vekt√∂r veritabanƒ±nda {rag.get_document_count()} belge mevcut")
    
    # Praktik sorular
    practical_queries = [
        "Toplam varlƒ±klar ne kadar?",
        "≈ûirketin finansal durumu nedir?",
        "Varlƒ±k daƒüƒ±lƒ±mƒ± nasƒ±l?",
        "Bilan√ßo tablosunu g√∂ster",
        "Gelir tablosu verileri nelerdir?",
        "En b√ºy√ºk varlƒ±k kalemi hangisi?",
        "Y√ºk√ºml√ºl√ºkler toplamƒ± ne kadar?",
        "√ñzsermaye tutarƒ± nedir?",
        "Nakit ve nakit benzerleri ne kadar?",
        "Satƒ±≈ü gelirleri ne kadar?"
    ]
    
    print(f"\n{'='*80}")
    print("PRATƒ∞K Fƒ∞NANSAL SORGU TESTLERƒ∞:")
    print('='*80)
    
    for i, query in enumerate(practical_queries, 1):
        print(f"\nüîç SORU {i}: {query}")
        print("-" * 60)
        
        try:
            # Normal query (finansal optimizasyon olmadan)
            result = rag.query(query, use_financial_optimization=False)
            print(f"üìä Normal RAG:")
            print(f"   Yanƒ±t: {result['answer'][:200]}...")
            print(f"   Kaynak sayƒ±sƒ±: {len(result.get('source_documents', []))}")
            
            # Financial optimized query
            result_optimized = rag.query(query, use_financial_optimization=True)
            print(f"üí∞ Financial RAG:")
            print(f"   Yanƒ±t: {result_optimized['answer'][:200]}...")
            print(f"   Kaynak sayƒ±sƒ±: {len(result_optimized.get('source_documents', []))}")
            
            # Source analysis
            sources = result_optimized.get('source_documents', [])
            if sources:
                table_sources = [s for s in sources if s.get('metadata', {}).get('type') == 'table']
                text_sources = [s for s in sources if s.get('metadata', {}).get('type') == 'text_chunk']
                
                print(f"   üéØ Tablo kaynaklarƒ±: {len(table_sources)}")
                print(f"   üìÑ Metin kaynaklarƒ±: {len(text_sources)}")
                
                if table_sources:
                    print(f"   ‚úÖ ƒ∞lk tablo kaynaƒüƒ±: {table_sources[0].get('id', 'unknown')}")
            
        except Exception as e:
            print(f"   ‚ùå Hata: {str(e)}")
    
    print(f"\n{'='*80}")
    print("√ñZET SONU√áLAR:")
    print('='*80)
    
    # Summary test - direct table query
    print("\nüéØ Direkt tablo sorgularƒ±nƒ± test edelim:")
    
    direct_table_queries = [
        "finansal durum tablosu",
        "bilan√ßo",
        "tablo verilerini g√∂ster",
        "varlƒ±k tablosu"
    ]
    
    for query in direct_table_queries:
        print(f"\nüîç Direkt sorgu: '{query}'")
        try:
            result = rag.query(query, use_financial_optimization=True)
            sources = result.get('source_documents', [])
            table_count = sum(1 for s in sources if s.get('metadata', {}).get('type') == 'table')
            print(f"   üìä Bulunan tablo sayƒ±sƒ±: {table_count}")
            print(f"   üí¨ Yanƒ±t uzunluƒüu: {len(result.get('answer', ''))}")
            
            if table_count > 0:
                print(f"   ‚úÖ Tablo bulundu!")
        except Exception as e:
            print(f"   ‚ùå Hata: {str(e)}")

if __name__ == "__main__":
    test_practical_queries() 